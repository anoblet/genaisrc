{"type":"entity","name":"GenAIScript Project","entityType":"Project","observations":["A monorepo project that uses workspaces to manage multiple packages","Uses the GenAIScript framework for creating AI-powered scripts","Organized into specialized packages for different script functionalities","Uses TypeScript with ESM modules for implementation"]}
{"type":"entity","name":"Commit Package","entityType":"Package","observations":["Located at packages/commit","Main entry point: commit.genai.mts","Orchestrates the commit process by sequentially invoking the comment and message modules","Uses GitHub Copilot Chat with GPT-4.1 model","Acts as a higher-level workflow coordinator","Demonstrates script composability by orchestrating both Comment and Message packages"]}
{"type":"entity","name":"Comment Package","entityType":"Package","observations":["Located at packages/comment","Main entry point: src/comment.genai.mts","Adds AI-generated comments to code files","Uses a prompt template from comment.genai.md","Processes files matching configured extensions from GENAISCRIPT_COMMENT_EXTENSIONS env variable","Uses GitHub Copilot Chat with GPT-4.1 model","Stages modified files after adding comments"]}
{"type":"entity","name":"Message Package","entityType":"Package","observations":["Located at packages/message","Main entry point: src/message.genai.mts","Generates git commit messages in the conventional commit format","Checks for staged changes and can handle large diffs by chunking","Uses conventional commits specification format","Can summarize multiple chunks into a cohesive commit message","Uses the 'large' model (which is an alias for a configured model)","Executes git commit with the generated message"]}
{"type":"entity","name":"Style Package","entityType":"Package","observations":["Located at packages/style","Main entry point: src/style.genai.mts","Uses a prompt template from style.prompt.md"]}
{"type":"entity","name":"Utility Package","entityType":"Package","observations":["Located at packages/utility","Main entry point: src/utility.ts","Contains shared utility functions used across other packages","Includes functions for file operations (getFiles, stageFiles)","Handles environment variable processing"]}
{"type":"entity","name":"GenAIScript Framework","entityType":"Framework","observations":["A scripting language that makes LLMs a first-class part of the scripting process","Allows users to author, debug, and deploy LLM-based scripts","Provides a domain-specific JavaScript framework to build LLM requests","Includes CLI and VS Code extension for script execution and debugging","Supports multiple LLM providers including GitHub Copilot, OpenAI, Azure OpenAI, Anthropic","Designed with composability as a key principle, allowing scripts to be combined in a modular way"]}
{"type":"entity","name":"Script Structure Convention","entityType":"CodePattern","observations":["Scripts should follow the pattern: export const [SCRIPT_NAME] = async () => { [CODE] }; export default [SCRIPT_NAME];","All scripts should be organized within a package","New packages are created using: npm init -y -w packages/[SCRIPT_NAME]","New scripts are created using npx genaiscript script create [SCRIPT_NAME]","Generated files should be moved from genaisrc directory to packages/[SCRIPT_NAME]/src","Package name in package.json should be updated to [SCRIPT_NAME]","TypeScript errors should be checked after every change","Scripts should be composable, allowing them to be combined to build more complex workflows","Composability enables reuse of functionality across different contexts"]}
{"type":"entity","name":"GenAIScript Syntax Patterns","entityType":"CodePattern","observations":["Uses template literals with $ to define prompts: $`Write a poem in code.`","Uses 'def' function to include content in prompts: def(\"FILE\", workspace.readText(\"path\"))","References variables in prompts by name after defining them","Extracts structured data and files from LLM output automatically","Uses 'script()' function to configure script behavior and tools","Accesses files passed to script via the env.files variable"]}
{"type":"entity","name":"GenAIScript Tool System","entityType":"Feature","observations":["Defines tools as JavaScript callbacks registered with the LLM","Uses 'defTool' to register custom functions as LLM tools","Provides built-in system tools like fs_read_file for common operations","Implements agents as tools that run an inline prompt with access to other tools","Supports Model Context Protocol (MCP) for tool integration","Every script can be exposed as a Model Context Provider Tool"]}
{"type":"entity","name":"GenAIScript Integration Patterns","entityType":"ArchitecturePattern","observations":["Scripts can be composed to build complex workflows","Uses importing and exporting mechanisms for script reusability","Integrates with Git workflows for commit message generation and code commenting","Provides CLI and VSCode extension for different execution contexts","Supports multiple LLM providers through a unified API","Implements RAG (Retrieval Augmented Generation) patterns through vector search"]}
{"type":"entity","name":"GenAIScript Data Processing","entityType":"Feature","observations":["Can ingest and process various document formats (PDF, DOCX, CSV, XLSX)","Supports data schemas for validation and repair using 'defSchema'","Can extract and manipulate tabular data with slicing capabilities","Implements automatic file generation from LLM outputs","Provides browser automation for web scraping","Supports image processing including resizing and cropping"]}
{"type":"entity","name":"GenAIScript Development Techniques","entityType":"DevelopmentPractice","observations":["Uses TypeScript for type safety and better developer experience","Implements testing and evaluation capabilities through promptfoo","Provides debugging tools for tracing LLM interactions","Uses environment variables for configuration management","Implements a caching system for optimization","Follows ESM module patterns for modern JavaScript compatibility"]}
{"type":"entity","name":"GenAIScript CLI Capabilities","entityType":"Feature","observations":["Provides run, convert, and test commands for different execution modes","Supports glob patterns for file selection","Can output results in various formats (JSON, YAML, Markdown)","Integrates with CI/CD systems through file output options","Provides PR integration features for GitHub and Azure DevOps","Supports local web server functionality for playground environment"]}
{"type":"entity","name":"Agent Architecture","entityType":"ArchitecturePattern","observations":["In GenAIScript, an agent is defined as a tool that queries an LLM equipped with other tools to accomplish tasks","Agents are higher-level abstractions that can orchestrate multiple tools","GenAIScript does not implement any agentic workflow or decision logic internally","Instead relies entirely on tools support built into the LLMs","The agent pattern typically involves one LLM calling another LLM with specialized tools","Each agent LLM call gets 'compressed' to just the agent response, helping manage context length"]}
{"type":"entity","name":"Implementation Patterns","entityType":"CodePattern","observations":["Packages follow a standard directory structure with src folder containing the main implementation","Script files use the .genai.mts extension indicating TypeScript with GenAIScript features","Prompt templates are stored in separate .md or .prompt.md files","Configuration uses environment variables for flexibility","Scripts are structured as ESM modules with named exports","Type definitions are included in genaiscript.d.ts files in each package"]}
{"type":"relation","from":"GenAIScript Project","to":"Commit Package","relationType":"contains"}
{"type":"relation","from":"GenAIScript Project","to":"Comment Package","relationType":"contains"}
{"type":"relation","from":"GenAIScript Project","to":"Message Package","relationType":"contains"}
{"type":"relation","from":"GenAIScript Project","to":"Style Package","relationType":"contains"}
{"type":"relation","from":"GenAIScript Project","to":"Utility Package","relationType":"contains"}
{"type":"relation","from":"GenAIScript Project","to":"Script Structure Convention","relationType":"follows"}
{"type":"relation","from":"GenAIScript Project","to":"GenAIScript Framework","relationType":"uses"}
{"type":"relation","from":"Commit Package","to":"Comment Package","relationType":"depends on"}
{"type":"relation","from":"Commit Package","to":"Message Package","relationType":"depends on"}
{"type":"relation","from":"Comment Package","to":"Utility Package","relationType":"depends on"}
{"type":"relation","from":"Message Package","to":"Utility Package","relationType":"depends on"}
{"type":"relation","from":"Style Package","to":"Utility Package","relationType":"depends on"}
{"type":"relation","from":"Commit Package","to":"GenAIScript Framework","relationType":"implements"}
{"type":"relation","from":"Comment Package","to":"GenAIScript Framework","relationType":"implements"}
{"type":"relation","from":"Message Package","to":"GenAIScript Framework","relationType":"implements"}
{"type":"relation","from":"Style Package","to":"GenAIScript Framework","relationType":"implements"}
{"type":"relation","from":"GenAIScript Framework","to":"GenAIScript Syntax Patterns","relationType":"defines"}
{"type":"relation","from":"GenAIScript Framework","to":"GenAIScript Tool System","relationType":"implements"}
{"type":"relation","from":"GenAIScript Framework","to":"GenAIScript Integration Patterns","relationType":"follows"}
{"type":"relation","from":"GenAIScript Framework","to":"GenAIScript Data Processing","relationType":"supports"}
{"type":"relation","from":"GenAIScript Framework","to":"GenAIScript Development Techniques","relationType":"employs"}
{"type":"relation","from":"GenAIScript Framework","to":"GenAIScript CLI Capabilities","relationType":"provides"}
{"type":"relation","from":"GenAIScript Project","to":"GenAIScript Syntax Patterns","relationType":"uses"}
{"type":"relation","from":"GenAIScript Project","to":"GenAIScript Development Techniques","relationType":"applies"}
{"type":"relation","from":"GenAIScript Framework","to":"Agent Architecture","relationType":"implements"}
{"type":"relation","from":"GenAIScript Project","to":"Implementation Patterns","relationType":"follows"}
{"type":"relation","from":"GenAIScript Tool System","to":"Agent Architecture","relationType":"enables"}
{"type":"relation","from":"Script Structure Convention","to":"Implementation Patterns","relationType":"defines"}