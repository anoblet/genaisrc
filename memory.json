{"type":"entity","name":"GenAIScript_Framework","entityType":"Framework","observations":["GenAIScript is a framework that allows users to create AI-enhanced scripts to automate tasks using LLMs","Uses JavaScript/TypeScript as foundation with stylized syntax for LLM interactions","Scripts have .genai.mjs or .genai.mts extensions and are typically stored in the genaisrc directory","Seamlessly integrates with Visual Studio Code through extension or can be used via command line interface","Supports various LLM providers including GitHub Copilot, OpenAI, Azure OpenAI, Anthropic, and others","Can be executed from command line or run with right-click context menu in VS Code"]}
{"type":"entity","name":"Script_Structure","entityType":"Code_Pattern","observations":["Scripts follow a consistent pattern with export declarations","The standard format is: export const [SCRIPT_NAME] = async () => { [CODE] }; export default [SCRIPT_NAME];","All scripts should have their own package with package.json","New packages are created using npm init -y -w packages/[SCRIPT_NAME]","New scripts are created using npx genaiscript script create [SCRIPT_NAME]","Script files generated in genaisrc directory should be moved to packages/[SCRIPT_NAME]/src directory"]}
{"type":"entity","name":"Prompt_Generation","entityType":"API_Pattern","observations":["Uses $` ` template literal syntax to create user messages for LLM prompts","def() function includes content in prompts and optimizes it for the target LLM","defSchema() defines and validates data schemas for structured outputs","defTool() registers JavaScript callbacks as LLM tools","defAgent() combines tools and inline prompts into an agent","The prompt variables and content are sent to the LLM server for processing"]}
{"type":"entity","name":"Tool_System","entityType":"Component","observations":["Tools are JavaScript functions registered with the LLM to perform specific tasks","GenAIScript provides built-in tools for file system operations, web search, git commands, etc.","Custom tools can be defined using defTool() function","Model Context Protocol (MCP) defines a protocol for sharing tools between frameworks","Tools can be used to execute code, search the web, read files, and more","Every script can be exposed as an MCP tool"]}
{"type":"entity","name":"Agent_System","entityType":"Component","observations":["An agent is a tool that queries an LLM equipped with other tools to accomplish tasks","Agents provide a higher-level abstraction for grouping multiple tools together","Built-in agents include agent_fs, agent_git, agent_github, agent_interpreter, and others","GenAIScript does not implement any agentic workflow or decision, it relies on tools support in LLMs","The agent abstraction helps manage complexity when there are many tools or to keep chat conversation length small"]}
{"type":"entity","name":"CLI_Commands","entityType":"Component","observations":["Command line interface supports various operations: run, convert, test, configure, etc.","run: Executes a script on files and streams LLM output to stdout or a folder","convert: Applies a script to files individually and extracts outputs","test: Runs tests for scripts using promptfoo with support for multiple models","serve: Launches a local web server for playground or VS Code integration","mcp: Starts a Model Context Protocol server that exposes scripts as tools"]}
{"type":"entity","name":"Development_Workflow","entityType":"Process","observations":["Development involves creating packages, writing scripts, and checking TypeScript errors","Scripts should be tested after changes to ensure they work correctly","Package names in package.json should match the script name","Files generated from genaisrc directory need to be moved to proper package location","TypeScript checking is an important part of the workflow","Debugging is supported in VS Code with JavaScript Debug Terminal"]}
{"type":"entity","name":"File_Processing","entityType":"Feature","observations":["Scripts can process single files or sets of files using glob patterns","env.files array contains files passed to the script","Supports various file formats including PDF, DOCX, CSV, XLSX, etc.","Can extract and process text, images, and structured data from files","GenAIScript parses LLM outputs and can extract files, diagnostics, and code sections","File changes can be previewed in VS Code Refactoring Preview"]}
{"type":"entity","name":"Project_Conventions","entityType":"Standard","observations":["GenAIScript files have .genai.mjs (JavaScript) or .genai.mts (TypeScript) extensions",".genai.mjs files use module JavaScript syntax and support imports",".genai.js files are eval-ed and do not support imports","Files are typically organized in a genaisrc folder by default","Each script should have its own package in the packages directory","Package.json should be updated to match the script name"]}
{"type":"entity","name":"Model_Configuration","entityType":"Configuration","observations":["Supports various LLM providers: OpenAI, Azure OpenAI, Anthropic, GitHub Models, etc.","Local models can be used through Ollama, LocalAI and similar services","Model configuration is done through model field in script function","Model aliases provide friendly names for specific models","Environment variables are used for authorization and configuration","Different models can be used for different tasks within the same script"]}
{"type":"entity","name":"Script_Composability","entityType":"Design_Pattern","observations":["Scripts should be composable, allowing them to be combined and reused in various contexts","Composable scripts can be used as building blocks for more complex automation workflows","This promotes modularity and reuse across different projects and tasks"]}